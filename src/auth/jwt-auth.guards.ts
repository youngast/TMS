import { Injectable, ExecutionContext, UnauthorizedException } from '@nestjs/common';
import { AuthGuard } from '@nestjs/passport';
import { Request } from "express";

export interface AuthRequest extends Request {
  user: {
    id: number;
    email: string;
    role?: string;
  };
}


@Injectable()
export class JwtAuthGuard extends AuthGuard('jwt') {
  canActivate(context: ExecutionContext) {
    return super.canActivate(context);
  }

  handleRequest(err, user, info, context: ExecutionContext) {
    if (err || !user) {
      throw new UnauthorizedException('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
    }

    console.log("üì• –î–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–π JWT:", user);

    if (!user.id || isNaN(Number(user.id))) {
      throw new UnauthorizedException('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–æ–∫–µ–Ω: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ–≤–∞–ª–∏–¥–µ–Ω');
    }

    const request = context.switchToHttp().getRequest<AuthRequest>();
    request.user = { ...user, id: Number(user.id) };

    return user;
  }
}